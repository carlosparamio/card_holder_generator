#!/usr/bin/env ruby

require "bundler/setup"
require "card_holder_generator"

def print_title(string)
  length = string.length
  puts "*" * (length + 4)
  puts "* #{string} *"
  puts "*" * (length + 4)
end

def get_integer(default = nil)
  question  = "Value (mm)"
  question += " (default: #{default})" if default
  question += ": "
  print question
  string = gets.chomp
  string = default if string.empty? && default
  string.to_i
end

def ask_value(title, description, default = nil)
  puts
  print_title(title)
  puts
  puts description
  value = get_integer(default)
  puts
  value
end

settings = {}

settings["external_walls_depth"] = ask_value("External walls depth", "Depth of external walls of the cards holder.", 3)
settings["floor_depth"]          = ask_value("Floor depth",          "Depth of the floor.", 3)
settings["top_margin"]           = ask_value("Top margin",           "Space on top of the cards up to reach the card holder top.", 3)
settings["separators_width"]     = ask_value("Separators width",     "Amount of material that will hold each set of cards on each side (left and right).", 10)
settings["separators_depth"]     = ask_value("Separators depth",     "Depth of the walls that separates each set of cards.", 3)
settings["magnets_height"]       = ask_value("Magnets height",       "Height of each magner at corners (leave blank if you don't want magnets).", 0)
settings["magnets_diameter"]     = ask_value("Magnets diameter",     "Diameter of each magner at corners (leave blank if you don't want magnets).", 0)
settings["cards_width"]          = ask_value("Cards width",          "Width of each card including sleeves (this will be the height of the card holder hole without the top margin).")
settings["cards_height"]         = ask_value("Cards height",         "Height of each card including sleeves (this will be the width of the card holder).")

settings["gap_depths"] = []
gap_num = 1

loop do
  gap_depth = ask_value("Gap depth ##{gap_num}", "Depth of the ##{gap_num} set of cards; determines size of this card set hole (leave empty to finish).")
  break if gap_depth == 0
  settings["gap_depths"] << gap_depth
  gap_num += 1
end

print_title "Final settings"
puts
puts settings.inspect
puts

scad = CardHolderGenerator.new(settings).to_scad

print "Writing file... "
File.open("card_holder_#{Time.now.to_i}.scad", "w") do |file|
  file.write(scad)
end
puts "DONE"